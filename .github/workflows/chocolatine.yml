name : chocolatine
run-name: Running chocolatine

on: 
    pull_request:
        branches-ignore:
            - "ga-ignore-**"
    push:
        branches-ignore:
            - "ga-ignore-**"

env:
    EXECUTABLES: "42sh"

jobs:
    check_coding_style:
        name: 'Check Coding Style'
        runs-on: ubuntu-latest
        container: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Run Coding Style'
              run: check.sh $(pwd) $(pwd)
            - name: 'Check Coding Style results'
              run: |
                cat $(pwd)/coding-style-reports.log
                if [ -s $(pwd)/coding-style-reports.log ]
                then
                    IFS=$IFS:
                    while read line; do
                        infos=()
                        for i in $line; do infos+=($i) ; done
                        echo "::error file=${infos[0]},line=${infos[1]},title=${infos[2]} coding style error::${infos[3]}"
                    done < $(pwd)/coding-style-reports.log
                    exit 1
                fi
    check_program_compilation:
        name: 'Check Program Compilation'
        runs-on: ubuntu-latest
        needs: check_coding_style
        container: epitechcontent/epitest-docker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Compile project'
              run: make
              timeout-minutes: 2
            - name: 'Clean'
              run: make clean
            - name: 'Check executables'
              run: |
                arrEXEC=$(echo ${{ env.EXECUTABLES }} | tr "," "\n")
                for exec in $arrEXEC
                    do
                        echo ${exec}
                        if [[ ! -f $exec ]]
                            then
                                echo "::error title=$exec::Missing $exec"
                                exit 1
                        fi
                        if [[ ! -x $exec ]]
                            then
                                echo "::error title=$exec::$exec is not executable"
                                exit 1
                        fi
                    done
    run_unit_tests:
        name: 'Run Unit Tests'
        runs-on: ubuntu-latest
        needs: check_program_compilation
        container: epitechcontent/epitest-docker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Run make tests_run'
              run: make tests_run
              timeout-minutes: 2
    run_tester:
        name: 'Run Tester'
        runs-on: ubuntu-latest
        needs: run_unit_tests
        container: epitechcontent/epitest-docker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - run: |
                make tester > tester.log   
                cat $(pwd)/tester.log
                found=0
                if [ -s $(pwd)/tester.log ]
                then
                    IFS=$IFS:
                    while read line; do
                        if [[ $line =~ "KO" ]]; then
                            echo "::error title=Tester error::$line"
                            found=1
                        fi
                    done < $(pwd)/tester.log
                fi
                echo "found ${found}"
                if [ $found == 1 ]; then
                    exit 1
                fi
              timeout-minutes: 3
